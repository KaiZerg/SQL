-- задача 1
SELECT round(avg(orders_count), 2) as orders_avg
FROM   (SELECT user_id,
               count(order_id) as orders_count
        FROM   user_actions
        WHERE  action = 'create_order'
        GROUP BY user_id) as t1
		
-- задача 2
with t1 as (SELECT user_id,
                   count(order_id) as orders_count
            FROM   user_actions
            WHERE  action = 'create_order'
            GROUP BY user_id)
SELECT round(avg(orders_count), 2) as orders_avg
FROM   t1

-- задача 3
SELECT product_id,
       name,
       price
FROM   products
WHERE  price != (SELECT min(price)
                 FROM   products)
ORDER BY product_id desc

-- задача 4
SELECT product_id,
       name,
       price
FROM   products
WHERE  price >= (SELECT avg(price)
                 FROM   products) + 20
ORDER BY product_id desc

-- задача 5
SELECT count(distinct user_id) as users_count
FROM   user_actions
WHERE  action = 'create_order'
   and time > (SELECT max(time)
            FROM   user_actions) - interval '1 week'
			
-- задача 6
SELECT min(age((SELECT max(time)::date
                FROM   courier_actions), birth_date))::varchar as min_age
FROM   couriers
WHERE  sex = 'male'

-- задача 7
SELECT order_id
FROM   user_actions
WHERE  order_id not in (SELECT order_id
                        FROM   user_actions
                        WHERE  action = 'cancel_order')
ORDER BY order_id limit 1000

-- задача 8
with t1 as (SELECT user_id,
                   count(order_id) as orders_count
            FROM   user_actions
            WHERE  action = 'create_order'
            GROUP BY user_id)
SELECT user_id,
       orders_count,
       round((SELECT avg(orders_count)
       FROM   t1), 2) as orders_avg, orders_count - round((SELECT avg(orders_count)
                                                    FROM   t1), 2) as orders_diff
FROM   t1
ORDER BY user_id limit 1000

-- задача 9
SELECT order_id,
       product_ids
FROM   orders
WHERE  order_id in (SELECT order_id
                    FROM   courier_actions
                    WHERE  action = 'deliver_order'
                    ORDER BY time desc limit 100)
ORDER BY order_id

-- задача 10
SELECT courier_id,
       birth_date,
       sex
FROM   couriers
WHERE  courier_id in (SELECT courier_id
                      FROM   courier_actions
                      WHERE  date_part('month', time) = 9
                         and date_part('year', time) = 2022
                         and action = 'deliver_order'
                      GROUP BY courier_id having count(distinct order_id) >= 30)
ORDER BY courier_id

-- задача 11
with subquery1 as (SELECT round(avg(price), 2) as avg_price
                   FROM   products)
SELECT product_id,
       name,
       price,
       case when price >= (SELECT avg_price
                    FROM   subquery1)+50 then price * 0.85 when price <= (SELECT avg_price
                                                      FROM   subquery1)-50 then price * 0.9 else price end as new_price
FROM   products
ORDER BY price desc, product_id

-- задача 12
SELECT creation_time,
       order_id,
       product_ids,
       unnest(product_ids) as product_id
FROM   orders limit 100

-- задача 13
with subquery1 as (SELECT unnest(product_ids) as product_id
                   FROM   orders)
SELECT product_id,
       count(product_id) as times_purchased
FROM   subquery1
GROUP BY product_id
ORDER BY count(product_id) desc limit 10

-- задача 14*
with subquery1 as (SELECT product_id
                   FROM   products
                   ORDER BY price desc limit 5)
SELECT order_id,
       product_ids
FROM   orders
WHERE  order_id in (SELECT order_id
                    FROM   (SELECT order_id,
                                   unnest(product_ids) as product_id
                            FROM   orders) query1
                    WHERE  product_id in (SELECT *
                                          FROM   subquery1))
ORDER BY order_id

-- задача 15*
with t1 as (SELECT user_id,
                   date_part('year', age((SELECT max(time)::date
                                   FROM   courier_actions), birth_date)) as age
            FROM   users
            ORDER BY user_id)
SELECT user_id,
       coalesce(date_part('year', age((SELECT max(time)::date
                                FROM   courier_actions), birth_date)), (SELECT avg(age)::int
                                        FROM   t1)) as age
FROM   users
ORDER BY user_id