-- задача 1
SELECT a.user_id as user_id_left,
       b.user_id as user_id_right,
       order_id,
       time,
       action,
       sex,
       birth_date
FROM   user_actions a join users b using (user_id)
ORDER BY user_id_left

-- задача 2
SELECT count(distinct a.user_id) as users_count
FROM   user_actions a join users b using (user_id)

-- задача 3
SELECT user_actions.user_id as user_id_left,
       users.user_id as user_id_right,
       order_id,
       time,
       action,
       sex,
       birth_date
FROM   user_actions
    LEFT JOIN users
        ON user_actions.user_id = users.user_id
ORDER BY user_actions.user_id

-- задача 4
SELECT count(distinct user_actions.user_id) as users_count
FROM   user_actions
    LEFT JOIN users
        ON user_actions.user_id = users.user_id
		
-- задача 5
SELECT a.user_id as user_id_left,
       b.user_id as user_id_right,
       order_id,
       time,
       action,
       sex,
       birth_date
FROM   user_actions a
    LEFT JOIN users b using (user_id)
WHERE  b.user_id is not null
ORDER BY user_id_left

-- задача 6
SELECT a.birth_date as users_birth_date,
       users_count,
       b.birth_date as couriers_birth_date,
       couriers_count
FROM   (SELECT birth_date,
               count(user_id) as users_count
        FROM   users
        WHERE  birth_date is not null
        GROUP BY birth_date) a full join (SELECT birth_date,
                                         count(courier_id) as couriers_count
                                  FROM   couriers
                                  WHERE  birth_date is not null
                                  GROUP BY birth_date) b using(birth_date)
ORDER BY users_birth_date, couriers_birth_date

-- задача 7
SELECT count(birth_date) as dates_count
FROM   (SELECT birth_date
        FROM   users
        WHERE  birth_date is not null
        UNION
SELECT birth_date
        FROM   couriers
        WHERE  birth_date is not null) t
		
-- задача 8
SELECT user_id,
       name
FROM   (SELECT user_id
        FROM   users limit 100) t1 cross join (SELECT name
                                       FROM   products) t2
ORDER BY user_id, name

-- задача 9
SELECT user_id,
       order_id,
       product_ids
FROM   user_actions
    LEFT JOIN orders using(order_id)
ORDER BY user_id, order_id limit 1000

-- задача 10
SELECT user_id,
       order_id,
       product_ids
FROM   (SELECT user_id,
               order_id
        FROM   user_actions
        WHERE  order_id not in (SELECT order_id
                                FROM   user_actions
                                WHERE  action = 'cancel_order')) t
    LEFT JOIN orders using(order_id)
ORDER BY user_id, order_id limit 1000

-- задача 11
SELECT user_id,
       round(avg(array_length(product_ids, 1)), 2) as avg_order_size
FROM   (SELECT user_id,
               order_id,
               product_ids
        FROM   user_actions
            LEFT JOIN orders using(order_id)
        WHERE  order_id not in (SELECT order_id
                                FROM   user_actions
                                WHERE  action = 'cancel_order')
        ORDER BY user_id, order_id) t1
GROUP BY user_id
ORDER BY user_id limit 1000

-- задача 12
SELECT order_id,
       t1.product_id,
       price
FROM   (SELECT creation_time,
               order_id,
               product_ids,
               unnest(product_ids) as product_id
        FROM   orders) t1
    LEFT JOIN products
        ON t1.product_id = products.product_id
ORDER BY order_id, t1.product_id limit 1000

-- задача 13
SELECT order_id,
       sum(price) as order_price
FROM   (SELECT order_id,
               product_ids,
               unnest(product_ids) as product_id
        FROM   orders) t1
    LEFT JOIN products using(product_id)
GROUP BY order_id
ORDER BY order_id limit 1000

-- задача 14
SELECT user_id,
       count(order_price) as orders_count,
       round(avg(order_size), 2) as avg_order_size,
       sum(order_price) as sum_order_value,
       round(avg(order_price), 2) as avg_order_value,
       min(order_price) as min_order_value,
       max(order_price) as max_order_value
FROM   (SELECT user_id,
               order_id,
               array_length(product_ids, 1) as order_size
        FROM   (SELECT user_id,
                       order_id
                FROM   user_actions
                WHERE  order_id not in (SELECT order_id
                                        FROM   user_actions
                                        WHERE  action = 'cancel_order')) t1
            LEFT JOIN orders using(order_id)) t2
    LEFT JOIN (SELECT order_id,
                      sum(price) as order_price
               FROM   (SELECT order_id,
                              product_ids,
                              unnest(product_ids) as product_id
                       FROM   orders
                       WHERE  order_id not in (SELECT order_id
                                               FROM   user_actions
                                               WHERE  action = 'cancel_order')) t3
                   LEFT JOIN products using(product_id)
               GROUP BY order_id) t4 using (order_id)
GROUP BY user_id
ORDER BY user_id limit 1000
